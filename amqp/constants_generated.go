// Package amqp for read, write, parse amqp frames
// Autogenerated code. Do not edit.
package amqp

// FrameMethod
const FrameMethod = 1

// FrameHeader
const FrameHeader = 2

// FrameBody
const FrameBody = 3

// FrameHeartbeat
const FrameHeartbeat = 8

// FrameMinSize
const FrameMinSize = 4096

// FrameEnd
const FrameEnd = 206

// ReplySuccess Indicates that the method completed successfully. This reply code is
// reserved for future use - the current protocol design does not use positive
// confirmation and reply codes are sent only in case of an error.
const ReplySuccess = 200

// ContentTooLarge The client attempted to transfer content larger than the server could accept
// at the present time. The client may retry at a later time.
const ContentTooLarge = 311

// NoConsumers When the exchange cannot deliver to a consumer when the immediate flag is
// set. As a result of pending data on the queue or the absence of any
// consumers of the queue.
const NoConsumers = 313

// ConnectionForced An operator intervened to close the connection for some reason. The client
// may retry at some later date.
const ConnectionForced = 320

// InvalidPath The client tried to work with an unknown virtual host.
const InvalidPath = 402

// AccessRefused The client attempted to work with a server entity to which it has no
// access due to security settings.
const AccessRefused = 403

// NotFound The client attempted to work with a server entity that does not exist.
const NotFound = 404

// ResourceLocked The client attempted to work with a server entity to which it has no
// access because another client is working with it.
const ResourceLocked = 405

// PreconditionFailed The client requested a method that was not allowed because some precondition
// failed.
const PreconditionFailed = 406

// FrameError The sender sent a malformed frame that the recipient could not decode.
// This strongly implies a programming error in the sending peer.
const FrameError = 501

// SyntaxError The sender sent a frame that contained illegal values for one or more
// fields. This strongly implies a programming error in the sending peer.
const SyntaxError = 502

// CommandInvalid The client sent an invalid sequence of frames, attempting to perform an
// operation that was considered invalid by the server. This usually implies
// a programming error in the client.
const CommandInvalid = 503

// ChannelError The client attempted to work with a channel that had not been correctly
// opened. This most likely indicates a fault in the client layer.
const ChannelError = 504

// UnexpectedFrame The peer sent a frame that was not expected, usually in the context of
// a content header and body.  This strongly indicates a fault in the peer's
// content processing.
const UnexpectedFrame = 505

// ResourceError The server could not complete the method because it lacked sufficient
// resources. This may be due to the client creating too many of some type
// of entity.
const ResourceError = 506

// NotAllowed The client tried to work with some entity in a manner that is prohibited
// by the server, due to security settings or by some other criteria.
const NotAllowed = 530

// NotImplemented The client tried to use functionality that is not implemented in the
// server.
const NotImplemented = 540

// InternalError The server could not complete the method because of an internal error.
// The server may require intervention by an operator in order to resume
// normal operations.
const InternalError = 541

// ClassConnection
const ClassConnection = 10

// MethodConnectionStart
const MethodConnectionStart = 10

// MethodConnectionStartOk
const MethodConnectionStartOk = 11

// MethodConnectionSecure
const MethodConnectionSecure = 20

// MethodConnectionSecureOk
const MethodConnectionSecureOk = 21

// MethodConnectionTune
const MethodConnectionTune = 30

// MethodConnectionTuneOk
const MethodConnectionTuneOk = 31

// MethodConnectionOpen
const MethodConnectionOpen = 40

// MethodConnectionOpenOk
const MethodConnectionOpenOk = 41

// MethodConnectionClose
const MethodConnectionClose = 50

// MethodConnectionCloseOk
const MethodConnectionCloseOk = 51

// MethodConnectionBlocked
const MethodConnectionBlocked = 60

// MethodConnectionUnblocked
const MethodConnectionUnblocked = 61

// ClassChannel
const ClassChannel = 20

// MethodChannelOpen
const MethodChannelOpen = 10

// MethodChannelOpenOk
const MethodChannelOpenOk = 11

// MethodChannelFlow
const MethodChannelFlow = 20

// MethodChannelFlowOk
const MethodChannelFlowOk = 21

// MethodChannelClose
const MethodChannelClose = 40

// MethodChannelCloseOk
const MethodChannelCloseOk = 41

// ClassExchange
const ClassExchange = 40

// MethodExchangeDeclare
const MethodExchangeDeclare = 10

// MethodExchangeDeclareOk
const MethodExchangeDeclareOk = 11

// MethodExchangeDelete
const MethodExchangeDelete = 20

// MethodExchangeDeleteOk
const MethodExchangeDeleteOk = 21

// MethodExchangeBind
const MethodExchangeBind = 30

// MethodExchangeBindOk
const MethodExchangeBindOk = 31

// MethodExchangeUnbind
const MethodExchangeUnbind = 40

// MethodExchangeUnbindOk
const MethodExchangeUnbindOk = 51

// ClassQueue
const ClassQueue = 50

// MethodQueueDeclare
const MethodQueueDeclare = 10

// MethodQueueDeclareOk
const MethodQueueDeclareOk = 11

// MethodQueueBind
const MethodQueueBind = 20

// MethodQueueBindOk
const MethodQueueBindOk = 21

// MethodQueueUnbind
const MethodQueueUnbind = 50

// MethodQueueUnbindOk
const MethodQueueUnbindOk = 51

// MethodQueuePurge
const MethodQueuePurge = 30

// MethodQueuePurgeOk
const MethodQueuePurgeOk = 31

// MethodQueueDelete
const MethodQueueDelete = 40

// MethodQueueDeleteOk
const MethodQueueDeleteOk = 41

// ClassBasic
const ClassBasic = 60

// MethodBasicQos
const MethodBasicQos = 10

// MethodBasicQosOk
const MethodBasicQosOk = 11

// MethodBasicConsume
const MethodBasicConsume = 20

// MethodBasicConsumeOk
const MethodBasicConsumeOk = 21

// MethodBasicCancel
const MethodBasicCancel = 30

// MethodBasicCancelOk
const MethodBasicCancelOk = 31

// MethodBasicPublish
const MethodBasicPublish = 40

// MethodBasicReturn
const MethodBasicReturn = 50

// MethodBasicDeliver
const MethodBasicDeliver = 60

// MethodBasicGet
const MethodBasicGet = 70

// MethodBasicGetOk
const MethodBasicGetOk = 71

// MethodBasicGetEmpty
const MethodBasicGetEmpty = 72

// MethodBasicAck
const MethodBasicAck = 80

// MethodBasicReject
const MethodBasicReject = 90

// MethodBasicRecoverAsync
const MethodBasicRecoverAsync = 100

// MethodBasicRecover
const MethodBasicRecover = 110

// MethodBasicRecoverOk
const MethodBasicRecoverOk = 111

// MethodBasicNack
const MethodBasicNack = 120

// ClassTx
const ClassTx = 90

// MethodTxSelect
const MethodTxSelect = 10

// MethodTxSelectOk
const MethodTxSelectOk = 11

// MethodTxCommit
const MethodTxCommit = 20

// MethodTxCommitOk
const MethodTxCommitOk = 21

// MethodTxRollback
const MethodTxRollback = 30

// MethodTxRollbackOk
const MethodTxRollbackOk = 31

// ClassConfirm
const ClassConfirm = 85

// MethodConfirmSelect
const MethodConfirmSelect = 10

// MethodConfirmSelectOk
const MethodConfirmSelectOk = 11

var ConstantsNameMap = map[uint16]string{

	1: "FRAME_METHOD",

	2: "FRAME_HEADER",

	3: "FRAME_BODY",

	8: "FRAME_HEARTBEAT",

	4096: "FRAME_MIN_SIZE",

	206: "FRAME_END",

	200: "REPLY_SUCCESS",

	311: "CONTENT_TOO_LARGE",

	313: "NO_CONSUMERS",

	320: "CONNECTION_FORCED",

	402: "INVALID_PATH",

	403: "ACCESS_REFUSED",

	404: "NOT_FOUND",

	405: "RESOURCE_LOCKED",

	406: "PRECONDITION_FAILED",

	501: "FRAME_ERROR",

	502: "SYNTAX_ERROR",

	503: "COMMAND_INVALID",

	504: "CHANNEL_ERROR",

	505: "UNEXPECTED_FRAME",

	506: "RESOURCE_ERROR",

	530: "NOT_ALLOWED",

	540: "NOT_IMPLEMENTED",

	541: "INTERNAL_ERROR",
}
